#include <iostream>
using namespace std;

#define MAX_SIZE 100

class Stack {
private:
    int top;
    int arr[MAX_SIZE];

public:
    Stack() {
        top = -1;
    }

    bool isEmpty() {
        return (top == -1);
    }

    bool isFull() {
        return (top == MAX_SIZE - 1);
    }

    void push(int value) {
        if (isFull()) {
            cout << "Stack Overflow\n";
            return;
        }
        arr[++top] = value;
        cout << "Pushed " << value << " onto the stack\n";
    }

    void pop() {
        if (isEmpty()) {
            cout << "Stack Underflow\n";
            return;
        }
        int popped = arr[top--];
        cout << "Popped " << popped << " from the stack\n";
    }

    void display() {
        if (isEmpty()) {
            cout << "Stack is empty\n";
            return;
        }
        cout << "Stack elements: ";
        for (int i = 0; i <= top; ++i) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    Stack stack;
    stack.push(1);
    stack.push(2);
    stack.push(3);
    stack.display();
    stack.pop();
    stack.display();
    return 0;
}




#include <iostream>
using namespace std;

#define MAX_SIZE 100

class Queue {
private:
    int front, rear;
    int arr[MAX_SIZE];

public:
    Queue() {
        front = -1;
        rear = -1;
    }

    bool isEmpty() {
        return (front == -1 && rear == -1);
    }

    bool isFull() {
        return (rear == MAX_SIZE - 1);
    }

    void insert(int value) {
        if (isFull()) {
            cout << "Queue Overflow\n";
            return;
        }
        if (isEmpty()) {
            front = rear = 0;
        } else {
            rear++;
        }
        arr[rear] = value;
        cout << "Inserted " << value << " into the queue\n";
    }

    void remove() {
        if (isEmpty()) {
            cout << "Queue Underflow\n";
            return;
        }
        int removed = arr[front];
        if (front == rear) {
            front = rear = -1;
        } else {
            front++;
        }
        cout << "Removed " << removed << " from the queue\n";
    }

    void display() {
        if (isEmpty()) {
            cout << "Queue is empty\n";
            return;
        }
        cout << "Queue elements: ";
        for (int i = front; i <= rear; ++i) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    Queue queue;
    queue.insert(1);
    queue.insert(2);
    queue.insert(3);
    queue.display();
    queue.remove();
    queue.display();
    return 0;
}




#include <iostream>
using namespace std;
int main()
{
  int a[5]={10,20,30,40,50},item,i;
  cout<<"n Enter element for Search => ";
  cin>>item;
  while(i<5)
  {
    if(a[i]==item)
    {
      cout<<"\n Item Found";
      break;
    }
    i++;
  }
  if(i>=5)
  {
    cout<<"\n Item Not Found";
  }
  return 0;
}



#include <iostream>
using namespace std;
int main()
{
  int a[5]={10,20,30,40,50};
  int lr=0,up=4,f=0,mid,item;
  cout<<"Enter No. For Search => ";
  cin>>item;
  while(lr<=up)
  {
    mid=(lr+up)/2;
    if(a[mid]==item)
    {
      f=1;
      break;
    }
    else
    {
      if(a[mid]<item)
        lr=mid+1;
      else
        up=mid-1;
    }
  }
  if(f==1)
    cout<<"\n Item is Found ";
  else
    cout<<"\n Item Not Found";
  return 0;
}





#include <iostream>
using namespace std;
int QPartition(int a[], int start, int end)
{
 int pivot = a[end];
 int i = (start - 1);
 for (int j = start; j <= end - 1; j++)
 {
  if (a[j] <= pivot)
  {
   i++;
   swap(a[i], a[j]);
  }
 }
 swap(a[i + 1], a[end]);
 return (i + 1);
}
void QuickSort(int a[], int start, int end)
{
 if (start < end)
 {
  int p = QPartition(a, start, end);
  QuickSort(a, start, p - 1);
  QuickSort(a, p + 1, end);
 }
}
void Printarr(int a[], int n)
{
 int i;
 for (i = 0; i < n; i++)
  cout << a[i] << " ";
 cout << "\n";
}
int main()
{
 int a[] = { 23, 8, 13, 28, 18, 26 };
 int n = sizeof(a) / sizeof(a[0]);
 cout << "Before sorting array elements are: \n";
 Printarr(a, n);
 QuickSort(a, 0, n - 1);
 cout << "After sorting array elements are: \n";
 Printarr(a, n);
 return 0;
}






#include <iostream>
using namespace std;
int findSmallest(int myarray[],int i);
int main()
{
    int myarray[10]={11,5,2,20,42,23,53,3,4,101,22};
    int pos,temp;
    cout<<"Unsorted List of elements "<<"\n";
    for(int i=0;i<10;++i)
    {
        cout<<myarray[i]<<" ";
    }
    cout<<"\n";
    for(int i=0;i<10;++i)
    {
        pos=findSmallest(myarray,i);
        temp=myarray[pos];
        myarray[pos]=myarray[i];
        myarray[i]=temp;
    }
    cout<<"\n"<<"Sorted list of elements is "<<"\n\n";
    for(int i=0;i<10;++i)
    {
        cout<<myarray[i]<<" ";
    }
    return 0;
}
int findSmallest(int myarray[],int i)
{
    int ele_small,position;
    ele_small=myarray[i];
    position=i;
    for(int j=i+1;j<10;++j)
    {
        if(myarray[j]<ele_small)
        {
            ele_small=myarray[j];
            position=j;
        }
    }
    return position;
}






#include <iostream>
using namespace std;
void InsertionSort(int arr[], int n)
{
 int i, temp, j;
 for (i = 1; i < n; i++)
 {
  temp = arr[i];
  j = i - 1;
  while (j >= 0 && arr[j] > temp)
  {
   arr[j + 1] = arr[j];
   j = j - 1;
  }
  arr[j + 1] = temp;
 }
}
void PrintArray(int arr[], int n)
{
 int i;
 for (i = 0; i < n; i++)
  cout << arr[i] << " ";
 cout << endl;
}
int main()
{
 int arr[] = { 12, 11, 13, 5, 6 };
 int n = sizeof(arr) / sizeof(arr[0]);
 cout << "Before sorting array element:-\n";
 PrintArray(arr, n);
 InsertionSort(arr, n);
 cout << "After sorting array element:-\n";
 PrintArray(arr, n);
 return 0;
}




#include <iostream>
using namespace std;
class BubbleSort
{
    int a[20],i,j,n,temp;
public:
    void getdata();
    void BSort();
    void display();
};
void BubbleSort::getdata()
{
    cout<<"Enter how many elements: ";
    cin>>n;
    cout<<"Enter elements: ";
    for(i=1;i<=n;i++)
    {
        cin>>a[i];
    }
}
void BubbleSort::BSort()
{
    for(i=1;i<=n-1;i++)
    {
        for(j=i+1;j<=n;j++)
        {
            if(a[i]>a[j])
            {
                temp=a[i];
                a[i]=a[j];
                a[j]=temp;
            }
        }
    }
}
void BubbleSort::display()
{
    cout<<"\nElements are Sorted using Bubble Sort in n";
    for(i=1;i<=n;i++)
    {
        cout<<a[i]<<" ";
    }
}
int main()
{
    BubbleSort b;
    b.getdata();
    b.BSort();
    b.display();
    return 0;
}ï¿¼Enter




